services:
  # Application Services
  dashboard:
    build:
      context: ./apps/dashboard
      dockerfile: Dockerfile.dev
    container_name: team-dashboard-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
      - WS_PORT=3001
      - AGENT_MANAGER_PORT=3003
      - MONITOR_PORT=8000
    volumes:
      - ./apps/dashboard:/app
      - ./packages:/packages
      - /app/node_modules
      - /app/.next
    networks:
      - dashboard-network
    depends_on:
      - redis
      - postgres
    command: pnpm dev

  agent-manager:
    build:
      context: ./services/agent-manager
      dockerfile: Dockerfile.dev
    container_name: team-dashboard-agent-manager
    ports:
      - "3001:3001"  # WebSocket port
      - "3003:3003"  # HTTP API port
    environment:
      - NODE_ENV=development
      - WS_PORT=3001
      - AGENT_MANAGER_PORT=3003
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://dashboard_user:dashboard_pass@postgres:5432/team_dashboard
    volumes:
      - ./services/agent-manager:/app
      - ./packages:/packages
      - /app/node_modules
    networks:
      - dashboard-network
    depends_on:
      - redis
      - postgres
    command: pnpm dev

  mcp-manager:
    build:
      context: ./services/mcp-manager
      dockerfile: Dockerfile.dev
    container_name: team-dashboard-mcp-manager
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - MCP_MANAGER_PORT=3004
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://dashboard_user:dashboard_pass@postgres:5432/team_dashboard
    volumes:
      - ./services/mcp-manager:/app
      - ./packages:/packages
      - /app/node_modules
    networks:
      - dashboard-network
    depends_on:
      - redis
      - postgres
    command: pnpm dev

  openai-service:
    build:
      context: ./services/openai-service
      dockerfile: Dockerfile.dev
    container_name: team-dashboard-openai-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - OPENAI_SERVICE_PORT=3005
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://dashboard_user:dashboard_pass@postgres:5432/team_dashboard
    volumes:
      - ./services/openai-service:/app
      - ./packages:/packages
      - /app/node_modules
    networks:
      - dashboard-network
    depends_on:
      - redis
      - postgres
    command: pnpm dev

  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: team-dashboard-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --notify-keyspace-events AKE
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - dashboard-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: team-dashboard-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=team_dashboard
      - POSTGRES_USER=dashboard_user
      - POSTGRES_PASSWORD=dashboard_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dashboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d team_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  influxdb:
    image: influxdb:2-alpine
    container_name: team-dashboard-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=team-dashboard
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=supersecrettoken
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - dashboard-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: team-dashboard-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - dashboard-network
    restart: unless-stopped
    depends_on:
      - influxdb

  grafana:
    image: grafana/grafana:latest
    container_name: team-dashboard-grafana
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3010
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dashboard-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - influxdb

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: team-dashboard-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - dashboard-network
    restart: unless-stopped
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: team-dashboard-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    networks:
      - dashboard-network
    restart: unless-stopped
    depends_on:
      - redis

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: team-dashboard-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - dashboard-network
    restart: unless-stopped

  # Reverse Proxy for Development
  nginx:
    image: nginx:alpine
    container_name: team-dashboard-nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - dashboard-network
    depends_on:
      - dashboard
      - agent-manager
      - mcp-manager
      - openai-service
    restart: unless-stopped

networks:
  dashboard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  influxdb_data:
  influxdb_config:
  loki_data: