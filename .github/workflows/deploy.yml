name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.1'

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run validation pipeline
        run: pnpm validate

      - name: Generate version
        id: version
        run: |
          if [[ ${{ github.event_name }} == 'push' && ${{ github.ref }} == 'refs/heads/main' ]]; then
            VERSION="v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)"
          else
            VERSION="pr-${{ github.event.number }}-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Check for deployment changes
        id: changes
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]] || [[ ${{ github.event_name }} == 'push' && ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service: [dashboard, agent-manager, mcp-manager, openai-service]
    outputs:
      dashboard-image: ${{ steps.dashboard.outputs.image }}
      agent-manager-image: ${{ steps.agent-manager.outputs.image }}
      mcp-manager-image: ${{ steps.mcp-manager.outputs.image }}
      openai-service-image: ${{ steps.openai-service.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./k8s/dockerfiles/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image digest
        id: ${{ matrix.service }}
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.validate.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging.team-dashboard.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to staging
        run: |
          # Update image tags in manifests
          export VERSION=${{ needs.validate.outputs.version }}
          envsubst < k8s/environments/staging/kustomization.yaml.template > k8s/environments/staging/kustomization.yaml
          
          # Apply configuration
          kubectl apply -k k8s/environments/staging/
          
          # Wait for rollout
          kubectl rollout status deployment/dashboard -n team-dashboard-staging --timeout=300s
          kubectl rollout status deployment/agent-manager -n team-dashboard-staging --timeout=300s
          kubectl rollout status deployment/mcp-manager -n team-dashboard-staging --timeout=300s
          kubectl rollout status deployment/openai-service -n team-dashboard-staging --timeout=300s

      - name: Run health checks
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=dashboard -n team-dashboard-staging --timeout=120s
          
          # Run health check tests
          curl -f https://staging.team-dashboard.app/health || exit 1
          
          # Run smoke tests
          npm run test:smoke -- --env=staging

      - name: Notify staging deployment
        run: |
          echo "✅ Staging deployment successful: ${{ needs.validate.outputs.version }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://team-dashboard.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Pre-deployment backup
        run: |
          # Create backup of current deployment
          kubectl get deployment dashboard -n team-dashboard-prod -o yaml > deployment-backup-$(date +%s).yaml
          
          # Store current image tags for rollback
          CURRENT_DASHBOARD=$(kubectl get deployment dashboard -n team-dashboard-prod -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "ROLLBACK_DASHBOARD_IMAGE=$CURRENT_DASHBOARD" >> $GITHUB_ENV

      - name: Blue-Green Deployment
        run: |
          export VERSION=${{ needs.validate.outputs.version }}
          
          # Create green environment
          envsubst < k8s/environments/production/kustomization.yaml.template > k8s/environments/production-green/kustomization.yaml
          kubectl apply -k k8s/environments/production-green/
          
          # Wait for green deployment
          kubectl rollout status deployment/dashboard-green -n team-dashboard-prod --timeout=600s
          kubectl rollout status deployment/agent-manager-green -n team-dashboard-prod --timeout=600s
          
          # Health check green environment
          kubectl wait --for=condition=ready pod -l app=dashboard-green -n team-dashboard-prod --timeout=300s

      - name: Smoke test production
        run: |
          # Test green environment through internal service
          kubectl port-forward svc/dashboard-green 8080:3000 -n team-dashboard-prod &
          sleep 10
          
          # Run comprehensive smoke tests
          curl -f http://localhost:8080/health || exit 1
          npm run test:smoke -- --env=production-green

      - name: Switch traffic to green
        run: |
          # Update service selector to point to green deployment
          kubectl patch service dashboard -n team-dashboard-prod -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service agent-manager -n team-dashboard-prod -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify traffic switch
          sleep 30
          curl -f https://team-dashboard.app/health || exit 1

      - name: Monitor deployment
        run: |
          # Monitor for 5 minutes
          for i in {1..10}; do
            curl -f https://team-dashboard.app/health || (echo "Health check failed, initiating rollback" && exit 1)
            sleep 30
          done

      - name: Cleanup blue environment
        run: |
          # Remove old blue deployment
          kubectl delete deployment dashboard-blue agent-manager-blue mcp-manager-blue openai-service-blue -n team-dashboard-prod --ignore-not-found
          
          # Rename green to blue for next deployment
          kubectl patch deployment dashboard-green -n team-dashboard-prod -p '{"metadata":{"name":"dashboard-blue"}}'

      - name: Tag successful deployment
        run: |
          git tag "production/${{ needs.validate.outputs.version }}"
          git push origin "production/${{ needs.validate.outputs.version }}"

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true' || failure()
    environment:
      name: production
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

      - name: Rollback to previous version
        run: |
          # Rollback deployments
          kubectl rollout undo deployment/dashboard -n team-dashboard-prod
          kubectl rollout undo deployment/agent-manager -n team-dashboard-prod
          
          # Wait for rollback
          kubectl rollout status deployment/dashboard -n team-dashboard-prod --timeout=300s
          
          # Verify health
          sleep 30
          curl -f https://team-dashboard.app/health

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🚀 Production deployment successful!"
          
      - name: Notify failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Production deployment failed!"