name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.15.1'
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run ESLint
        run: pnpm lint
      
      - name: Check formatting
        run: pnpm prettier --check .
      
      - name: Check file sizes
        run: |
          # Ensure no TypeScript/JavaScript files exceed 200 lines
          find . -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | \
          grep -v node_modules | \
          while read file; do
            lines=$(wc -l < "$file")
            if [ $lines -gt 200 ]; then
              echo "ERROR: $file has $lines lines (max 200)"
              exit 1
            fi
          done

  # ============================================================================
  # TypeScript Type Checking
  # ============================================================================
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run TypeScript check
        run: pnpm typecheck

  # ============================================================================
  # Unit Tests
  # ============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run unit tests with coverage
        run: pnpm test:coverage
      
      - name: Generate coverage badge
        run: pnpm coverage:badge
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json,./coverage/lcov.info,./coverage/cobertura-coverage.xml
          flags: unit
          name: unit-tests
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            !coverage/tmp
          retention-days: 30
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage
          message: |
            ## ðŸ“Š Coverage Report
            
            Overall coverage: ![Coverage](https://img.shields.io/badge/coverage-42%25-red.svg)
            
            [View detailed report](https://app.codecov.io/gh/${{ github.repository }}/pull/${{ github.event.number }})
          recreate: true

  # ============================================================================
  # Integration Tests
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: dashboard
          POSTGRES_PASSWORD: dashboard
          POSTGRES_DB: dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Node dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Python dependencies
        run: |
          pip install -r services/requirements.txt
      
      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://dashboard:dashboard@localhost:5432/dashboard_test
        run: pnpm test:integration

  # ============================================================================
  # Build Verification
  # ============================================================================
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [dashboard, agent-manager, system-monitor]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build package
        run: pnpm --filter ${{ matrix.package }} build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}-build
          path: |
            apps/${{ matrix.package }}/.next
            apps/${{ matrix.package }}/dist
            services/${{ matrix.package }}/dist

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run npm audit
        run: pnpm audit --audit-level=moderate
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # ============================================================================
  # Docker Build
  # ============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [dashboard, agent-manager, system-monitor]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.service }}
          push: false
          tags: team-dashboard/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Performance Tests
  # ============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run performance tests
        run: pnpm test:performance
      
      - name: Check performance thresholds
        run: |
          # Verify WebSocket latency < 50ms
          # Verify page load time < 2s
          # Verify memory usage < 500MB
          node scripts/check-performance.js

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [lint, typecheck, test-unit, test-integration, build, security]
    environment:
      name: staging
      url: https://staging.team-dashboard.dev
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, typecheck, test-unit, test-integration, build, security, performance]
    environment:
      name: production
      url: https://team-dashboard.dev
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here

  # ============================================================================
  # Notification
  # ============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, typecheck, test-unit, test-integration, build, security]
    
    steps:
      - name: Send notification
        run: |
          echo "Pipeline completed with status: ${{ job.status }}"
          # Add Slack/Discord/Email notification here