name: Security Scanning

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read
  contents: read
  security-events: write

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "8"

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "🔍 Running npm audit for vulnerabilities..."
          pnpm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          high_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          critical_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $high_vulns"
          echo "Critical vulnerabilities: $critical_vulns"
          
          if [ "$critical_vulns" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
          
          if [ "$high_vulns" -gt 5 ]; then
            echo "⚠️ Too many high vulnerabilities ($high_vulns > 5)"
            exit 1
          fi
          
          echo "✅ Dependency scan passed"

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-results
          path: audit-results.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Custom secret pattern scan
        run: |
          echo "🔍 Scanning for custom secret patterns..."
          
          # Check for common secret patterns
          secrets_found=0
          
          # API keys
          if grep -r "api[_-]key.*=" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Potential API key found"
            secrets_found=$((secrets_found + 1))
          fi
          
          # Database passwords
          if grep -r "password.*=" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
            echo "⚠️ Potential password found"
            secrets_found=$((secrets_found + 1))
          fi
          
          # OpenAI API keys
          if grep -r "sk-[a-zA-Z0-9]\{20,\}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ OpenAI API key found!"
            secrets_found=$((secrets_found + 1))
          fi
          
          # Private keys
          if grep -r "BEGIN.*PRIVATE.*KEY" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Private key found!"
            secrets_found=$((secrets_found + 1))
          fi
          
          if [ $secrets_found -gt 0 ]; then
            echo "❌ $secrets_found potential secrets found. Please review!"
            exit 1
          fi
          
          echo "✅ No secrets detected"

  # Code security analysis
  code-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript
          queries: security-extended

      - name: Setup pnpm for autobuild
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js for autobuild
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies for autobuild
        run: pnpm install --frozen-lockfile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"

  # Docker image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'schedule'
    strategy:
      matrix:
        service: [dashboard, agent-manager, mcp-manager, openai-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          if [ -f "./docker/Dockerfile.${{ matrix.service }}" ]; then
            docker build -t team-dashboard/${{ matrix.service }}:scan -f ./docker/Dockerfile.${{ matrix.service }} .
          else
            echo "⚠️ Dockerfile not found for ${{ matrix.service }}, skipping"
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'team-dashboard/${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Check Trivy scan results
        run: |
          echo "🔍 Analyzing Trivy scan results for ${{ matrix.service }}..."
          
          # Check for critical vulnerabilities
          if [ -f "trivy-results-${{ matrix.service }}.sarif" ]; then
            critical_count=$(cat trivy-results-${{ matrix.service }}.sarif | jq '.runs[0].results | length')
            echo "Total issues found: $critical_count"
            
            if [ "$critical_count" -gt 10 ]; then
              echo "⚠️ High number of security issues found in ${{ matrix.service }}"
            else
              echo "✅ Security scan passed for ${{ matrix.service }}"
            fi
          fi

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov'

      - name: Docker Compose security validation
        run: |
          echo "🔍 Validating Docker Compose security configuration..."
          
          # Check for insecure configurations
          issues_found=0
          
          # Check for privileged containers
          if grep -r "privileged.*true" docker-compose*.yml; then
            echo "❌ Privileged containers detected"
            issues_found=$((issues_found + 1))
          fi
          
          # Check for host network mode
          if grep -r "network_mode.*host" docker-compose*.yml; then
            echo "❌ Host network mode detected"
            issues_found=$((issues_found + 1))
          fi
          
          # Check for volume mounts to sensitive paths
          if grep -r "/var/run/docker.sock" docker-compose*.yml; then
            echo "⚠️ Docker socket mount detected"
          fi
          
          # Check for default passwords
          if grep -r "password.*password" docker-compose*.yml; then
            echo "❌ Default passwords detected"
            issues_found=$((issues_found + 1))
          fi
          
          if [ $issues_found -gt 0 ]; then
            echo "❌ $issues_found security issues found in Docker Compose"
            exit 1
          fi
          
          echo "✅ Docker Compose security validation passed"

  # License compliance scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "📄 Checking license compliance..."
          
          # Generate license report
          license-checker --summary > license-summary.txt
          license-checker --json > license-report.json
          
          # Check for problematic licenses
          problematic_licenses=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          
          for license in "${problematic_licenses[@]}"; do
            if grep -q "$license" license-summary.txt; then
              echo "❌ Problematic license detected: $license"
              grep "$license" license-summary.txt
              exit 1
            fi
          done
          
          echo "✅ License compliance check passed"
          cat license-summary.txt

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: |
            license-summary.txt
            license-report.json
          retention-days: 90

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-analysis, container-scan, iac-scan, license-scan]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Generate security summary
        run: |
          echo "📊 Security Scan Summary"
          echo "========================"
          echo ""
          echo "**Scan Results:**"
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "- Secret Detection: ${{ needs.secret-scan.result }}"
          echo "- Code Analysis: ${{ needs.code-analysis.result }}"
          echo "- Container Scan: ${{ needs.container-scan.result }}"
          echo "- Infrastructure Scan: ${{ needs.iac-scan.result }}"
          echo "- License Compliance: ${{ needs.license-scan.result }}"
          echo ""
          
          # Determine overall security status
          failed_scans=0
          
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ "${{ needs.code-analysis.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ "${{ needs.container-scan.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ "${{ needs.iac-scan.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ "${{ needs.license-scan.result }}" != "success" ]; then
            failed_scans=$((failed_scans + 1))
          fi
          
          if [ $failed_scans -eq 0 ]; then
            echo "✅ **Overall Security Status: PASSED**"
            echo "All security scans completed successfully."
          else
            echo "❌ **Overall Security Status: FAILED**"
            echo "$failed_scans security scan(s) failed."
            exit 1
          fi

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results
            
            | Scan Type | Status |
            |-----------|--------|
            | Dependency Vulnerabilities | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |
            | Secret Detection | ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }} |
            | Code Security Analysis | ${{ needs.code-analysis.result == 'success' && '✅' || '❌' }} |
            | Container Security | ${{ needs.container-scan.result == 'success' && '✅' || '❌' }} |
            | Infrastructure Security | ${{ needs.iac-scan.result == 'success' && '✅' || '❌' }} |
            | License Compliance | ${{ needs.license-scan.result == 'success' && '✅' || '❌' }} |
            
            ### Security Recommendations
            - Review any flagged vulnerabilities in the Security tab
            - Ensure all secrets are properly stored in GitHub Secrets
            - Keep dependencies updated to latest secure versions
            - Follow security best practices for Docker containers
            
            _Security scanning by @performance-engineer_`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Send security alert notification
        if: failure() && github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: 'danger'
          channel: '#security-alerts'
          text: |
            🚨 **Security Scan Failed**
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref }}
            **Failed Scans:** Check the GitHub Actions logs
            
            Please investigate immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL